# Generated by Django 5.2.6 on 2025-09-26 08:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("plants", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("bio", models.TextField(blank=True, max_length=500)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, upload_to="profiles/"),
                ),
                (
                    "experience_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "Complete Beginner"),
                            ("some_experience", "Some Experience"),
                            ("experienced", "Experienced Gardener"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "available_space",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("windowsill", "Windowsill Only"),
                            ("small_balcony", "Small Balcony"),
                            ("large_balcony", "Large Balcony"),
                            ("garden", "Garden/Yard"),
                            ("indoor_only", "Indoor Only"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "sunlight_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Hours of direct sunlight available",
                        null=True,
                    ),
                ),
                (
                    "preferred_care_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Beginner (I forget to water)",
                                "Beginner (I forget to water)",
                            ),
                            (
                                "Intermediate (I can follow a schedule)",
                                "Intermediate (I can follow a schedule)",
                            ),
                            (
                                "Advanced (I love plant care)",
                                "Advanced (I love plant care)",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
                ("newsletter_subscription", models.BooleanField(default=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "favorite_plants",
                    models.ManyToManyField(
                        blank=True, related_name="favorited_by", to="plants.plant"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PlantIdentificationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="identifications/")),
                (
                    "api_response",
                    models.JSONField(help_text="Full API response for debugging"),
                ),
                ("confidence_score", models.FloatField(blank=True, null=True)),
                ("user_confirmed", models.BooleanField(blank=True, null=True)),
                ("user_feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "identified_plant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Plant that was identified (if any)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="plants.plant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identification_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Plant Identification History",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPlantCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("want_to_grow", "Want to Grow"),
                            ("currently_growing", "Currently Growing"),
                            ("successfully_grown", "Successfully Grown"),
                            ("had_issues", "Had Issues With"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Personal notes about this plant"
                    ),
                ),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("date_planted", models.DateField(blank=True, null=True)),
                ("last_watered", models.DateField(blank=True, null=True)),
                ("last_fertilized", models.DateField(blank=True, null=True)),
                ("last_repotted", models.DateField(blank=True, null=True)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True, help_text="Rate this plant (1-5 stars)", null=True
                    ),
                ),
                ("would_recommend", models.BooleanField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="plants.plant"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plant_collection",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "plant")},
            },
        ),
    ]
